Changes to include:

  - Pass a "package" search path, removing the need for knowing JPM
    implementation details
  - This parameter will be called `--pkg-location` (This parameter needs to be
    passed to `OLParser`). This is relative from the working directory.
  - We only allow one (to start)

Changes to configuration:

  - We need to know where the main files are located. We also don't want to
    parse the package documents (as they are potentially JSON)
  - Add a new parameter `--main.<packageName> <mainFile>`
  - The `<mainFile>` will be relative to the _current working directory_. Thus
    it must include `jpm_packages`

---

This moves some of the responsibility onto JPM (which is good). Thus when we run
`jpm deploy [<myFile.col>] <profile>` a few things must happen:

  - Parse package descriptions. For the current package and all dependencies
  - If the package being deployed is a dependency, we need to handle this
    slightly differently. (We require a parsed config file for this [Internal
    Java service?])
    + We need to cd into the concrete package directory (We can set the pwd when
      starting a process)
    + Dependencies are now served from the parent directory (use 
      `--pkg-location`). This needs to be accounted for in the inclusion code, 
      as it needs to make some assumptions (I think)
    + The remaining parameters now also need corrected file paths
  - Add `--main.*` parameters
  - Add `--deploy <myFile.col> <profile>`

---

