# Summary

This is a summary of how the current proposal for configuration should work
under Jolie. In this folder you will find several example use-cases in which I
tried this out.

First we classify services by the following properties:

  - __open or closed:__ closed services contain only types and interfaces, open
    services additionally contain source code for running the service
  - __internal or external:__ internal services are embedded inside of a parent
    service, external services are hosted in another VM

|              |          __Open__         |      __Closed__      |
|--------------|---------------------------|----------------------|
| __Internal__ | An embedded Jolie service | Doesn't exist        |
| __External__ | A deployed Jolie service  | Any external service |

This folder contains the following:

  - [Basics](basics.md): This document covers the basics of configuration with a
    simple dependency tree. This covers closed external (with and without
    config), and open external. These works without any major problems. Although
    configuration of closed external isn't currently possible, I propose a
    soltuion.
  - [Simple Embedding](simple_embedding.md): This document covers moving between
    an open internal and open external service. This currently has several
    problems, including not currently being able to embed a service solely from
    configuration.
  - [Deployment and Embedding](deployment_embedding.md): This document covers
    deployment in more details and switching between internal and external
    services. This has several problems.

Good news:

  - The proposed modifiers should work without any problems. 

Problems:

  - The current system does not allow us to switch between open external and
    open internal easily. The system does in fact not allow us to do embedding 
  - Deployment relies heavily on how this configuration system will work. The
    current system has several flaws when it comes to the deployment of
    packages:
        + The external configuration format isn't powerful enough to deal
          embedded packages, especially when we have multiple copies
        + Merging of configuration becomes problematic
        + To easily switch between embedding and not embedded services we end up
          creating one large configuration file for the entire system.
  - In certain situations a package would like to mark certain configuration as
    being final, such that it may make assumptions about this.
  - Deploying the dependencies of a dependency is problematic under the current
    config.

Proposed changes:

  - Introduce a `final` modifier for external configuration files
  - 


I wrote a few different use-cases in summary:

  - Having a dependency tree of depth one works fine
  - Closed external services aren't configurable. In certain cases we might want
    that TODO See example
  - Configuring open external services can work
  - The regions proposed for the configuration files are too simplistic
    + This espescially shows when we start embedding services
  - We currently cannot embed a service without source code changes. This means
    that we cannot change the behavior of _any_ dependency
  - Deployment of packages downloaded via JPM is problematic. Configuration ends
    up being bundled with the client. Should probably be separate?