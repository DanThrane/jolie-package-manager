# New `ext` Syntax

All properties of input/output ports must now be marked `ext` as opposed to the
entire thing. For example:

```jolie
inputPort Foo {
    Location: ext
    Protocol: http {
        // ...
    }
    Interfaces: // ...
}
```

As opposed to:

```jolie
ext inputPort Foo {
    Protocol: http {
        // ...
    }
    Interfaces: // ...
}
```

# Jolie Configuration

Jolie configuration files will output to the following internal POJO:

```java
public class ConfigurationFile {
    Map< String, Configuration > regions;
}

public class Configuration {
    // We need to keep these separate since *it is* okay to have name clashes.

    // TODO Currently, however, this should only happen between output and input
    // ports. Output ports and constants would clash. Also why don't we import
    // input ports into the same namespace as output ports?

    // The easiest solution to this, would be to just pull input ports into 
    // the same space, but then we suddenly have them clashing. This entire 
    // situation doesn't make a whole lot of sense.
    Map< String, Value > constants;
    Map< String, Value > inputPorts;
    Map< String, Value > outputPorts;
}
```

The configuration file can contain several regions, all of which contain
configuration. A service will pull configuration information from a region
matching the name of itself (This being passed via the CLI).

Any construct being passed outside of a region will be put inside the "default"
region.